{"version":3,"file":"static/js/614.77583b90.chunk.js","mappings":"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","sources":["components/Box/Box.jsx","components/ContactForm/ContactForm-styled.jsx","components/ContactForm/ContactForm .jsx","components/ContactList/ContactList-styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter-styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  shadow,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  shadow\n);\n","import { Field as FormikField, Form as FormikForm } from 'formik';\nimport styled from 'styled-components';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n  display: flex;\n`;\n\nexport const Field = styled(FormikField)`\n  width: 170px;\n  height: 20px;\n  margin-left: 5px;\n  background-color: #d9d9d9;\n  border: none;\n  box-shadow: 0px 1px 0px rgb(0 0 0), 0px 1px 4px rgb(0 0 0 / 63%),\n    0px 2px 3px rgb(0 0 0 / 42%);\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #5eb164;\n  }\n`;\n\nexport const Button = styled.button`\n  width: 130px;\n  height: 35px;\n  background-color: #5eb164;\n  border-radius: 8px;\n  color: white;\n  font-size: 14px;\n  border: none;\n  box-shadow: 0px 1px 7px rgb(0 0 0), 0px 1px 8px rgb(0 0 0 / 67%),\n    0px 2px 3px rgb(0 0 0 / 47%);\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: white;\n    color: #217a0b;\n  }\n`;\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport { Form, Label, Field, Button } from './ContactForm-styled';\nimport * as yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\n\nyup.addMethod(yup.string, 'numeric', function () {\n  return this.matches(/^\\d+$/, 'The field should have digits only');\n});\n\nconst schema = yup.object().shape({\n  name: yup.string().min(3).required(),\n  number: yup.string().numeric().min(12).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(state => state.contacts.items);\n  const errorFetch = useSelector(state => state.contacts.error);\n  // const addLoading = useSelector(state => state.contacts.isLoading);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      return toast.error(`${values.name} is already in contacts.`);\n    }\n    try {\n      await dispatch(addContact(values));\n      toast.success('Контакт додано успішно');\n    } catch (error) {\n      toast.error(`Помилка ${errorFetch}, контакт не доданий`);\n    }\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form>\n        <Label>\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter your name...\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <ErrorMessage name=\"name\" component=\"div\" />\n        <Label>\n          Phone\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter your tel...\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <ErrorMessage name=\"number\" component=\"div\" />\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Button = styled.button`\n  margin-left: 8px;\n  width: 88px;\n  height: 26px;\n  background-color: #5eb164;\n  border-radius: 8px;\n  color: white;\n  font-size: 14px;\n  border: none;\n  box-shadow: 0px 1px 7px rgb(0 0 0), 0px 1px 8px rgb(0 0 0 / 67%),\n    0px 2px 3px rgb(0 0 0 / 47%);\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: white;\n    color: #217a0b;\n  }\n`;\n\nexport const Li = styled.li`\n  list-style: none;\n`;\n\nexport const Info = styled.p`\n  display: inline-flex;\n  align-items: center;\n`;\n","import React from 'react';\nimport { Box, Button, Info, Li } from './ContactList-styled';\nimport { FcInfo } from 'react-icons/fc';\nimport { getFilter } from '../../redux/contacts/filterSlice';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contact = useSelector(state => state.contacts.items);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  const error = useSelector(state => state.contacts.error);\n\n  const filter = useSelector(getFilter);\n\n  const normalizedFilterSearch = filter.toLowerCase();\n  let filteredContact;\n\n  if (contact !== undefined && contact.length > 0) {\n    filteredContact = contact.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilterSearch)\n    );\n  }\n\n  return (\n    <>\n      {error && <p>Помилка `${error}`, спробуйте перезавантажити сторінку.</p>}\n      {filteredContact !== undefined && filteredContact.length >= 1 && (\n        <ul>\n          {filteredContact.map(item => {\n            return (\n              <Li key={item.id}>\n                <Box>\n                  <Info>\n                    <FcInfo size={24} />\n                    {item.name} : (Tel: - {item.number})\n                  </Info>\n                  <Button\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(deleteContact(item.id));\n                      toast.success('Deleted successfully');\n                    }}\n                    disabled={isLoading}\n                  >\n                    Delete\n                  </Button>\n                </Box>\n              </Li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { DebounceInput } from 'react-debounce-input';\n\nexport const Label = styled.label`\n  font-size: 18px;\n  font-weight: 600;\n  display: flex;\n`;\n\nexport const Input = styled(DebounceInput)`\n  width: 170px;\n  height: 20px;\n  margin-left: 5px;\n  background-color: #d9d9d9;\n  border: none;\n  box-shadow: 0px 1px 0px rgb(0 0 0), 0px 1px 4px rgb(0 0 0 / 63%),\n    0px 2px 3px rgb(0 0 0 / 42%);\n  transition: background-color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background-color: #5eb164;\n  }\n`;\n","import React from 'react';\nimport { Label, Input } from './Filter-styled';\nimport { foundedContact } from '../../redux/contacts/filterSlice';\nimport { useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/filterSlice';\nimport { useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onChange = e => {\n    dispatch(foundedContact(e.target.value));\n  };\n\n  return (\n    <Label>\n      Search\n      <Input\n        minLength={1}\n        debounceTimeout={300}\n        type=\"text\"\n        onChange={onChange}\n        value={filter}\n        placeholder=\"Search by name...\"\n      />\n    </Label>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Box } from '../components/Box/Box';\nimport { ContactForm } from '../components/ContactForm/ContactForm ';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { FcPhoneAndroid } from 'react-icons/fc';\nimport { ColorRing } from 'react-loader-spinner';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const contact = useSelector(state => state.contacts.items);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <>\n        <Box paddingBottom=\"30px\" paddingTop=\"30px\">\n          <Box\n            paddingBottom=\"30px\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            marginLeft=\"auto\"\n            marginRight=\"auto\"\n            alignItems=\"center\"\n            width=\"500px\"\n            boxShadow=\"0px 1px 7px rgb(0 0 0), 0px 1px 8px rgb(0 0 0 / 67%), 0px 2px 3px rgb(0 0 0 / 47%)\"\n            borderRadius=\"0px 0px 4px 4px\"\n            backgroundColor=\"#cbcbcb\"\n            marginBottom=\"80px\"\n          >\n            <h1>\n              <FcPhoneAndroid size={25} />\n              Phonebook\n            </h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            {isLoading && <ColorRing />}\n            {contact !== undefined && contact.length > 0 ? (\n              <>\n                {<Filter />}\n                {<ContactList />}\n              </>\n            ) : (\n              <p>No contacts here ...</p>\n            )}\n\n            {/* )} */}\n          </Box>\n        </Box>\n      </>\n    </>\n  );\n}\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","shadow","Form","FormikForm","Label","Field","FormikField","Button","yup","this","matches","schema","shape","name","min","required","number","numeric","initialValues","ContactForm","dispatch","useDispatch","contacts","useSelector","state","items","errorFetch","error","handleSubmit","values","resetForm","some","contact","toLowerCase","toast","addContact","onSubmit","validationSchema","type","placeholder","title","component","Li","Info","ContactList","filteredContact","isLoading","normalizedFilterSearch","getFilter","undefined","length","filter","includes","map","item","size","onClick","deleteContact","id","disabled","Input","DebounceInput","Filter","minLength","debounceTimeout","onChange","e","foundedContact","target","value","Tasks","useEffect","fetchContacts","Helmet","paddingBottom","paddingTop","display","flexDirection","marginLeft","marginRight","alignItems","width","boxShadow","borderRadius","backgroundColor","marginBottom"],"sourceRoot":""}